global:
  image: 
    # registry: registry1.dso.mil
    # repository: ironbank/opensource/grafana/grafana-loki
    # tag: 2.3.0
    priorityClassName: null
    pullPolicy: IfNotPresent
    pullSecrets:
    - private-registry

  createGlobalConfig: false
  existingSecretForConfig: null

  objectStorage:
    endpoint: s3.amazonaws.com
    region: us-east-1
    bucketnames: loki-bucket
    access_key_id: accesskey
    secret_access_key: supersecret
    adminBucketName: loki-bucket

  config: |
    auth:
      type: enterprise
    auth_enabled: true

    license:
      path: "/etc/enterprise-logs/license/license.jwt"

    cluster_name: {{ .Release.Name }}

    server:
      http_listen_port: 3100
      grpc_listen_port: 9095

    common:
      replication_factor: 1
      storage:
        filesystem: null
        s3:
          bucketnames: {{ .Values.global.objectStorage.bucketnames }}
          endpoint: {{ .Values.global.objectStorage.endpoint }}
          region: {{ .Values.global.objectStorage.region }}
          secret_access_key: {{ .Values.global.objectStorage.secret_access_key }}
          access_key_id: {{ .Values.global.objectStorage.access_key_id }}
          insecure: true
          s3forcepathstyle: true

    memberlist:
      join_members:
        - localhost
        - {{ include "loki.fullname" . }}-memberlist-tcp:7946

    admin_client:
      storage:
        type: s3
        s3:
          bucket_name: {{ .Values.global.objectStorage.adminBucketName }}
          insecure: true
          endpoint: s3.us-east-1.amazonaws.com
          secret_access_key: {{ .Values.global.objectStorage.secret_access_key }}
          access_key_id: {{ .Values.global.objectStorage.access_key_id }}

    compactor:
      shared_store: s3
      working_directory: /var/loki/boltdb-shipper-compactor
      compaction_interval: 30s

    ingester:
      lifecycler:
        num_tokens: 512
      chunk_idle_period: 30m
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_retain_period: 1m
      wal:
        dir: /var/loki/wal

    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m

    frontend:
      log_queries_longer_than: 10s
      compress_responses: true
      tail_proxy_url: http://{{ include "loki.fullname" . }}:3100

    querier:
      query_ingesters_within: 12h

    query_range:
      split_queries_by_interval: 24h
      align_queries_with_step: true
      cache_results: true
      results_cache:
        cache:
          memcached:
            expiration: 1h
          memcached_client:
            timeout: 1s

    schema_config:
      configs:
        - from: 2021-01-01
          store: boltdb-shipper
          object_store: aws
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      aws:
        endpoint: {{ .Values.global.objectStorage.endpoint }}
        bucketnames: {{ .Values.global.objectStorage.bucketnames }}
        access_key_id: {{ .Values.global.objectStorage.access_key_id }}
        secret_access_key: {{ .Values.global.objectStorage.secret_access_key }}
        region: {{ .Values.global.objectStorage.region }}
        s3forcepathstyle: true
        insecure: true
      boltdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        cache_ttl: 24h
        shared_store: s3

    ruler:
      storage:
        type: s3
        s3:
          bucketnames: {{ .Values.global.objectStorage.bucketnames }}
      enable_alertmanager_discovery: false
      enable_api: true
      enable_sharding: true
      rule_path: /var/loki

domain: bigbang.dev

istio:
  enabled: false
  loki:
    gateways:
    - "istio-system/main"
    hosts:
    - loki.{{ .Values.domain }}

monitoring:
  enabled: false

networkPolicies:
  enabled: false
  controlPlaneCidr: 0.0.0.0/0

loki:
  enabled: true
  image:
    repository: registry1.dso.mil/ironbank/opensource/grafana/loki
    tag: 2.4.2
    pullPolicy: IfNotPresent
    pullSecrets:
      - private-registry
  podLabels:
    app.kubernetes.io/part-of: memberlist
  extraPorts:
  - name: grpc
    port: 9095
    targetPort: grpc
    protocol: TCP
  - name: tcp-memberlist
    port: 7946
    protocol: TCP

  readinessProbe:
    initialDelaySeconds: 80
  livenessProbe:
    initialDelaySeconds: 80

  resources: 
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

loki-simple-scalable:
  enabled: false
  loki:
    image:
      # -- The Docker registry
      registry: registry1.dso.mil
      # -- Docker image repository
      repository: ironbank/opensource/grafana/loki
      # -- Overrides the image tag whose default is the chart's appVersion
      tag: 2.4.2
      # -- Docker image pull policy
      pullPolicy: IfNotPresent

  gateway:
    image:
      registry: registry1.dso.mil
      repository: ironbank/opensource/nginx/nginx
      tag: 1.21.6

serviceAccount:
  create: true
  name: null
  annotations: {}
  automountServiceAccountToken: true

gel:
  enabled: false
  # -----------------------------------------
  # Configuration for `enterprise-logs` chart
  # -----------------------------------------

  # -- Overrides the chart's name
  nameOverride: null

  # -- Overrides the chart's computed fullname
  fullnameOverride: null

  # -- Definition of the Docker image for Grafana Enterprise Logs
  # If the image block is overwritten in a custom values file, it is also
  # required to update the values in the `loki-distributed.loki.image` block.
  # This can be done by copying the values, or like here, by using an anchor and
  # a pointer.
  image: &image
    # -- The container registry to use
    registry: docker.io
    # -- The image repository to use
    repository: grafana/enterprise-logs
    # -- The version of Grafana Enterprise Logs
    tag: v1.3.0
    # -- Defines the policy how and when images are pulled
    pullPolicy: IfNotPresent
    # -- Additional image pull secrets
    pullSecrets: []

  # -- Definition of the ServiceAccount for containers
  # Any additional configuration of the ServiceAccount has to be done in
  # `loki-distributed.serviceAccount`.
  serviceAccount:
    # -- Specifies whether a ServiceAccount should be created
    # If this value is changed to `false`, it also needs to be reflected in
    # `loki-distributed.serviceAccount.create`.
    create: true

  # -- External config.yaml
  # A GEL configuration file may be provided as Kubernetes Secret outside of this Helm chart.
  useExternalConfig: false
  externalConfigName: loki-config
  externalConfigVersion: "0"

  # -- External license.jwt .Values.global.objectStorage.bucketnames }}
  # A GEL license file may be provided as Kubernetes Secret outside of this Helm chart.
  useExternalLicense: false
  externalLicenseName: enterprise-logs-license
  externalLicenseVersion: "0"

  # -- Grafana Enterprise Logs license
  # In order to use Grafana Enterprise Logs features, you will need to provide
  # the contents of your Grafana Enterprise Logs license, either by providing the
  # contents of the license.jwt, or the name Kubernetes Secret that contains your
  # license.jwt.
  # To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
  license:
    contents: "NOTAVALIDLICENSE"
    cluster_name: null

  # -- Configuration for `tokengen` target
  tokengen:
    # -- Whether the job should be part of the deployment
    enable: true
    # -- Additional CLI arguments for the `tokengen` target
    extraArgs: {}
    # -- Additional Kubernetes environment
    env: []
    # -- Additional labels for the `tokengen` Job
    labels: {}
    # -- Additional annotations for the `tokengen` Job
    annotations: {}
    # -- Additional volumes for Pods
    extraVolumes: []
    # -- Additional volume mounts for Pods
    extraVolumeMounts: []
    # -- Run containers as user `enterprise-logs(uid=10001)`
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001

    priorityClassName: null

  # -- Configuration for the `admin-api` target
  adminApi:
    # -- Define the amount of instances
    replicas: 1
    # -- Additional CLI arguments for the `admin-api` target
    extraArgs: {}
    # -- Additional labels for the `admin-api` Deployment
    labels: {}
    # -- Additional annotations for the `admin-api` Deployment
    annotations: {}
    # -- Additional labels and annotations for the `admin-api` Service
    service:
      labels: {}
      annotations: {}
    # -- Run container as user `enterprise-logs(uid=10001)`
    # `fsGroup` must not be specified, because these security options are applied
    # on container level not on Pod level.
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001

    strategy:
      type: RollingUpdate

    env: []

    persistence:
      subPath:

    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45

    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45

    # -- Request and limit Kubernetes resources
    # -- Values are defined in small.yaml and large.yaml
    resources: {}

    initContainers: []
    extraContainers: []

    # -- Additional volumes for Pods
    extraVolumes: []
    # -- Additional volume mounts for Pods
    extraVolumeMounts: []

    # -- Affinity for admin-api Pods
    affinity: {}
    # -- Node selector for admin-api Pods
    nodeSelector: {}
    # -- Tolerations for admin-api Pods
    tolerations: []
    # -- Grace period to allow the admin-api to shutdown before it is killed
    terminationGracePeriodSeconds: 60

  # -- Configuration for the `gateway` target
  gateway:
    # -- Define the amount of instances
    replicas: 1
    # -- Additional CLI arguments for the `gateway` target
    extraArgs: {}
    # -- Additional labels for the `gateway` Pod
    labels: {}
    # -- Additional annotations for the `gateway` Pod
    annotations: {}
    # -- Additional labels and annotations for the `gateway` Service
    service:
      labels: {}
      annotations: {}
    # -- Run container as user `enterprise-logs(uid=10001)`
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001

    # If you want to use your own proxy URLs, set this to false.
    useDefaultProxyURLs: true

    strategy:
      type: RollingUpdate

    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45

    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45

    # -- Request and limit Kubernetes resources
    # -- Values are defined in small.yaml and large.yaml
    resources: {}

    env: []

    persistence:
      subPath:

    initContainers: []
    extraContainers: []

    # -- Additional volumes for Pods
    extraVolumes: []
    # -- Additional volume mounts for Pods
    extraVolumeMounts: []

    # -- Affinity for gateway Pods
    affinity: {}
    # -- Node selector for gateway Pods
    nodeSelector: {}
    # -- Tolerations for gateway Pods
    tolerations: []
    # -- Grace period to allow the gateway to shutdown before it is killed
    terminationGracePeriodSeconds: 60


  # -- Configuration for the `compactor` target
  compactor:
    # -- Define the amount of instances
    replicas: 1
    # -- Additional CLI arguments for the `compactor` target
    extraArgs: {}
    # -- Additional labels for the `compactor` Pod
    labels: {}
    # -- Additional annotations for the `compactor` Pod
    annotations: {}
    # -- Additional labels and annotations for the `compactor` Service
    service:
      labels: {}
      annotations: {}
    # -- Run containers as user `enterprise-logs(uid=10001)`
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001

    strategy:
      type: RollingUpdate

    # -- Request and limit Kubernetes resources
    # -- Values are defined in small.yaml and large.yaml
    resources: {}

    persistentVolume:
      # If true compactor will create/use a Persistent Volume Claim
      # If false, use emptyDir
      #
      enabled: true
      # compactor data Persistent Volume Claim annotations
      #
      annotations: {}
      # compactor data Persistent Volume access modes
      # Must match those of existing PV or dynamic provisioner
      # Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
      #
      accessModes:
        - ReadWriteOnce
      # compactor data Persistent Volume size
      #
      size: 2Gi
      # Subdirectory of compactor data Persistent Volume to mount
      # Useful if the volume's root directory is not empty
      #
      subPath: ''
      # compactor data Persistent Volume Storage Class
      # If defined, storageClassName: <storageClass>
      # If set to "-", storageClassName: "", which disables dynamic provisioning
      # If undefined (the default) or set to null, no storageClassName spec is
      #   set, choosing the default provisioner.  (gp2 on AWS, standard on
      #   GKE, AWS & OpenStack)
      #
      # storageClass: "-"

    livenessProbe:
      failureThreshold: 20  # 10 minutes failure threshold
      httpGet:
        path: /ready
        port: http-metrics
        scheme: HTTP
      initialDelaySeconds: 180
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 1

    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 60

    env: []

    initContainers: []
    extraContainers: []

    # -- Additional volumes for Pods
    extraVolumes: []
    # -- Additional volume mounts for Pods
    extraVolumeMounts: []

    # -- Affinity for compactor Pods
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: target
                    operator: In
                    values:
                      - compactor
              topologyKey: 'kubernetes.io/hostname'
    # -- Node selector for compactor Pods
    nodeSelector: {}
    # -- Tolerations for compactor Pods
    tolerations: []
    # -- Grace period to allow the compactor to shutdown before it is killed
    terminationGracePeriodSeconds: 300


